// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Notification_Scheduling_System.DatabaseContexts;

#nullable disable

namespace Notification_Scheduling_System.Migrations
{
    [DbContext(typeof(NotificationSchedulingDbContext))]
    [Migration("20221030234730_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("Notification_Scheduling_System.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MarketCountryName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MarketCountryName");

                    b.HasIndex("TypeName");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Notification_Scheduling_System.Entities.CompanyType", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("CompanyType");
                });

            modelBuilder.Entity("Notification_Scheduling_System.Entities.Market", b =>
                {
                    b.Property<string>("CountryName")
                        .HasColumnType("TEXT");

                    b.HasKey("CountryName");

                    b.ToTable("Markets");
                });

            modelBuilder.Entity("Notification_Scheduling_System.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("NotificationScheduleId")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("SendDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NotificationScheduleId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Notification_Scheduling_System.Entities.NotificationSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ConfigurationUsedId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTimestampUTC")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ConfigurationUsedId");

                    b.ToTable("NotificationSchedules");
                });

            modelBuilder.Entity("Notification_Scheduling_System.Entities.NotificationScheduleConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ActiveFrom")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyTypeName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("MarketCountryName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyTypeName");

                    b.HasIndex("MarketCountryName");

                    b.ToTable("NotificationConfigurations");
                });

            modelBuilder.Entity("Notification_Scheduling_System.Entities.ScheduleConfigurationDay", b =>
                {
                    b.Property<int>("DayOfTheMonth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("DayOfTheMonth");

                    b.ToTable("ScheduledDays");
                });

            modelBuilder.Entity("NotificationScheduleConfigurationScheduleConfigurationDay", b =>
                {
                    b.Property<Guid>("AssignedConfigurationsId")
                        .HasColumnType("TEXT");

                    b.Property<int>("DaysOfMonthForNotificationsDayOfTheMonth")
                        .HasColumnType("INTEGER");

                    b.HasKey("AssignedConfigurationsId", "DaysOfMonthForNotificationsDayOfTheMonth");

                    b.HasIndex("DaysOfMonthForNotificationsDayOfTheMonth");

                    b.ToTable("NotificationScheduleConfigurationScheduleConfigurationDay");
                });

            modelBuilder.Entity("Notification_Scheduling_System.Entities.Company", b =>
                {
                    b.HasOne("Notification_Scheduling_System.Entities.Market", "Market")
                        .WithMany("Companies")
                        .HasForeignKey("MarketCountryName");

                    b.HasOne("Notification_Scheduling_System.Entities.CompanyType", "Type")
                        .WithMany("Companies")
                        .HasForeignKey("TypeName");

                    b.Navigation("Market");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Notification_Scheduling_System.Entities.Notification", b =>
                {
                    b.HasOne("Notification_Scheduling_System.Entities.NotificationSchedule", null)
                        .WithMany("ScheduledNotifications")
                        .HasForeignKey("NotificationScheduleId");
                });

            modelBuilder.Entity("Notification_Scheduling_System.Entities.NotificationSchedule", b =>
                {
                    b.HasOne("Notification_Scheduling_System.Entities.Company", null)
                        .WithMany("NotificationSchedules")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Notification_Scheduling_System.Entities.NotificationScheduleConfiguration", "ConfigurationUsed")
                        .WithMany()
                        .HasForeignKey("ConfigurationUsedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfigurationUsed");
                });

            modelBuilder.Entity("Notification_Scheduling_System.Entities.NotificationScheduleConfiguration", b =>
                {
                    b.HasOne("Notification_Scheduling_System.Entities.CompanyType", "CompanyType")
                        .WithMany()
                        .HasForeignKey("CompanyTypeName");

                    b.HasOne("Notification_Scheduling_System.Entities.Market", "Market")
                        .WithMany()
                        .HasForeignKey("MarketCountryName");

                    b.Navigation("CompanyType");

                    b.Navigation("Market");
                });

            modelBuilder.Entity("NotificationScheduleConfigurationScheduleConfigurationDay", b =>
                {
                    b.HasOne("Notification_Scheduling_System.Entities.NotificationScheduleConfiguration", null)
                        .WithMany()
                        .HasForeignKey("AssignedConfigurationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Notification_Scheduling_System.Entities.ScheduleConfigurationDay", null)
                        .WithMany()
                        .HasForeignKey("DaysOfMonthForNotificationsDayOfTheMonth")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Notification_Scheduling_System.Entities.Company", b =>
                {
                    b.Navigation("NotificationSchedules");
                });

            modelBuilder.Entity("Notification_Scheduling_System.Entities.CompanyType", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Notification_Scheduling_System.Entities.Market", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Notification_Scheduling_System.Entities.NotificationSchedule", b =>
                {
                    b.Navigation("ScheduledNotifications");
                });
#pragma warning restore 612, 618
        }
    }
}
